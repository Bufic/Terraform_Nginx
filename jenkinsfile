// pipeline {

//     parameters {
//         booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
//     }

//     environment {
//         AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
//         AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
//     }

//     agent any

//     stages {
//         stage('checkout') {
//             steps {
//                 script {
//                     dir("terraform") {
//                         git url: 'https://github.com/Bufic/Terraform_Nginx.git', branch: 'main'
//                     }
//                 }
//             }
//         }

//         stage('Plan') {
//             steps {
//                 sh 'pwd; cd terraform/ ; terraform init'
//                 sh 'pwd; cd terraform/ ; terraform plan -out tfplan'
//                 sh 'pwd; cd terraform/ ; terraform show -no-color tfplan > tfplan.txt'
//             }
//         }

//         stage('Approval') {
//             when {
//                 not {
//                     equals expected: true, actual: params.autoApprove
//                 }
//             }

//             steps {
//                 script {
//                     def plan = readFile 'terraform/Terraform-Jenkins/tfplan.txt'
//                     input message: "Do you want to apply the plan?",
//                     parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
//                 }
//             }
//         }

//         stage('Apply') {
//             steps {
//                 sh 'pwd; cd terraform/ ; terraform apply -input=false tfplan'
//             }
//         }

//         stage('Destroy Approval') {
//             steps {
//                 script {
//                     // Capture user input to set the `confirmDestroy` parameter
//                     def userInput = input message: "Do you want to destroy the resources?",
//                                            parameters: [booleanParam(name: 'confirmDestroy', description: 'Confirm destroy?', defaultValue: false)]
//                     // Set params.confirmDestroy to the input value
//                     params.confirmDestroy = userInput.confirmDestroy

//                 }
//             }
//         }

//         stage('Destroy') {
//             // Execute the Destroy stage only if the confirmDestroy parameter is true
//             when {
//                 expression { return params.confirmDestroy == true }
//             }
//             steps {
//                 dir('terraform') {
//                     sh 'terraform destroy -auto-approve'
//                 }
//             }
//         }
//     }
// }


pipeline {
    agent any

    environment {
        // Load AWS credentials stored in Jenkins credentials store
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    // Change this directory to the location where your Terraform code resides
                    dir('terraform') {
                        git url: 'https://github.com/Bufic/Terraform_Nginx.git', branch: 'main'
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir('terraform') {
                        // Save the plan to a file named tfplan
                        sh 'terraform plan -out=tfplan'
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir('terraform') {
                        // Apply the plan without user input
                        sh 'terraform apply -input=false tfplan'
                    }
                }
            }
        }

        stage('Destroy Approval') {
            steps {
                script {
                    // Prompt the user for approval to destroy the infrastructure
                    def userResponse = input(
                        message: "Do you want to destroy the infrastructure?",
                        parameters: [choice(name: 'Proceed', choices: ['Yes', 'No'], description: 'Choose Yes to destroy or No to skip destruction')]
                    )

                    // Use if-else to check user response and handle destroy accordingly
                    if (userResponse == 'Yes') {
                        // Proceed to the destroy stage
                        currentBuild.displayName = "#${env.BUILD_NUMBER} - Destroy Approved"
                        currentBuild.description = "User approved destruction"
                        env.DESTROY_APPROVED = 'true'
                    } else {
                        // Skip the destroy stage
                        currentBuild.displayName = "#${env.BUILD_NUMBER} - Destroy Skipped"
                        currentBuild.description = "User skipped destruction"
                        env.DESTROY_APPROVED = 'false'
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            // Run this stage only if destruction is approved
            when {
                expression { env.DESTROY_APPROVED == 'true' }
            }
            steps {
                script {
                    dir('terraform') {
                        // Destroy the Terraform infrastructure
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }
}
